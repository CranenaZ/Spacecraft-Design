#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_HMC5883_U.h>
#include <Adafruit_MPU6050.h>
#include "MAX471.h"

Adafruit_HMC5883_Unified mag(12345);
Adafruit_MPU6050 mpu;
MAX471 myMax471(ADC_10_bit, VCC_BAT, A1, A0);

int16_t ax, ay, az, gx, gy, gz;

void setup() {
  Serial.begin(115200);
  while (!Serial);

  if (!mag.begin() || !mpu.begin()) while(1);
  mpu.setAccelerometerRange(MPU6050_RANGE_2_G);
  mpu.setGyroRange(MPU6050_RANGE_250_DEG);
}

void loop() {
  char hex[24] = {0};
  int idx = 0;

  sensors_event_t event;
  mag.getEvent(&event);
  processVal(event.magnetic.x * 0.92, hex, idx);
  processVal(event.magnetic.y * 0.92, hex, idx);
  processVal(event.magnetic.z * 0.92, hex, idx);

  readMPU();
  processVal((ax / 16384.0) * 9.81, hex, idx);
  processVal((ay / 16384.0) * 9.81, hex, idx);
  processVal((az / 16384.0) * 9.81, hex, idx);
  processVal(gx / 131.0, hex, idx);
  processVal(gy / 131.0, hex, idx);
  processVal(gz / 131.0, hex, idx);

  float voltage = myMax471.VoltageRead();
  float current = myMax471.CurrentRead();
  uint32_t packed = packData(voltage, current);
  appendPacked(packed, hex, idx);

  Serial.print("Combined Hex: ");
  Serial.println(hex);
  delay(2000);
}

void processVal(float val, char* buf, int &i) {
  bool neg = val < 0;
  int scaled = min(127, round(abs(val) * 3));
  byte b = (neg << 7) | scaled;
  buf[i++] = "0123456789ABCDEF"[b >> 4];
  buf[i++] = "0123456789ABCDEF"[b & 0xF];
}

void readMPU() {
  Wire.beginTransmission(0x68);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(0x68, 14);

  ax = Wire.read()<<8 | Wire.read();
  ay = Wire.read()<<8 | Wire.read();
  az = Wire.read()<<8 | Wire.read();
  Wire.read(); Wire.read();
  gx = Wire.read()<<8 | Wire.read();
  gy = Wire.read()<<8 | Wire.read();
  gz = Wire.read()<<8 | Wire.read();
}

uint32_t packData(float v, float c) {
  int vw = constrain((int)v, 0, 15);
  int vd = constrain((int)((v - vw) * 100), 0, 99);
  int cw = constrain((int)c, 0, 3);
  int cd = constrain((int)((c - cw) * 100), 0, 99);
  return ((uint32_t)vw << 16) | (vd << 9) | (cw << 7) | cd;
}

void appendPacked(uint32_t p, char* buf, int &i) {
  for (int j = 0; j < 5; j++) {
    uint8_t nibble = (p >> (16 - j*4)) & 0xF;
    buf[i++] = "0123456789ABCDEF"[nibble];
  }
}
